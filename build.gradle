group 'org.bahmni.indiadistro'
version '0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'rpm'

sourceCompatibility = 1.8
def mainClassName = "org.bahmni.indiadistro.ModuleManager"


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(
                'com.netflix.nebula:gradle-ospackage-plugin:2.+'
        )
    }
}

repositories {
    mavenCentral()
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

dependencies {
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.4'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.4'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version: '2.12.0'

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

private static Properties loadConfig() {
    Properties properties = new Properties()
    properties.load(new FileInputStream(new File('env/local.properties')));
    properties
}

task assembly(dependsOn: 'build') {
    doLast {
        new File("${buildDir}/etc/").mkdir();
    }
}

task exportProperties(dependsOn: 'assembly') {
    doLast {
        PrintStream output = new PrintStream(new FileOutputStream(file("${buildDir}/etc/distro-module-manager")));
        Properties properties = loadConfig()
        properties.each { prop, val ->
            output.println("export " + prop + "=" + val)
        }
    }
}

task downloadDistroZip(dependsOn: 'build') {
    doLast {
        def distroZipUrl = 'https://github.com/BahmniIndiaDistro/distro/archive/master.zip'
        def distroZipFile = new File("${buildDir}/resources/distro.zip")
        if (!distroZipFile.exists()) {
            distroZipFile << new URL(distroZipUrl).openStream()
        }
    }
}

task downloadAndExtractDistroZip(dependsOn: 'downloadDistroZip', type: Copy) {
    from zipTree(new File("${buildDir}/resources/distro.zip"))
    into new File("${buildDir}/resources/")
}

task dist(dependsOn: ['exportProperties', 'downloadAndExtractDistroZip'], type: Rpm) {
    packageName = 'distro-module-manager'
    version = '0.1'
    arch = NOARCH
    os = LINUX

    into '/opt/distro-module-manager'

//    postInstall = file('scripts/utils/postInstall.sh')
//    preUninstall = file('scripts/utils/preUninstall.sh')
//    postUninstall = file('scripts/utils/postUninstall.sh')

    from("${buildDir}/etc") {
        fileMode = 0755
        into 'etc'
    }

    from("${buildDir}/resources/distro-master") {
        fileMode = 0755
        into 'distro'
    }

//    from("scripts/rpm") {
//        fileMode = 0755
//        exclude 'placeholder'
//        into 'bin'
//    }

    from("${buildDir}/libs") {
        fileMode = 0755
        into 'lib'
    }

//    from("scripts/rpm") {
//        fileMode = 0755
//        exclude 'distro-module-manager'
//        exclude 'start.sh'
//        into 'var'
//    }
}

